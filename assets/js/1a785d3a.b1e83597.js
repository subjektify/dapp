"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3575],{8929:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var i=n(4848),t=n(8453);const l={},r="@subjektifylabs/subjektify-build",a={id:"learn/plugins/subjektify-build",title:"@subjektifylabs/subjektify-build",description:"NPM Version",source:"@site/docs/learn/plugins/subjektify-build.md",sourceDirName:"learn/plugins",slug:"/learn/plugins/subjektify-build",permalink:"/docs/learn/plugins/subjektify-build",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"learnSidebar",previous:{title:"Building Plugins",permalink:"/docs/learn/advanced/plugins"}},o={},u=[{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"subjektifylabssubjektify-build",children:"@subjektifylabs/subjektify-build"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://www.npmjs.org/package/@subjektifylabs/subjektify-build",children:(0,i.jsx)(s.img,{src:"http://img.shields.io/npm/v/@subjektifylabs/subjektify-build.svg?style=flat",alt:"NPM Version"})})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"subjektify-build"})," is a core package of the Subjektify toolkit, designed to facilitate the build process the Subjekt model. This package provides tools and utilities to parse, validate, and compile Subjekt model files, ensuring a seamless and efficient build workflow."]}),"\n",(0,i.jsx)(s.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Model Parsing"}),": Parse Subjekt model files (.subjekt or JSON) to generate an Abstract Syntax Tree (AST) or a SubjektifyModel."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Validation"}),": Validate the structure and semantics of Subjekt models to ensure correctness."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Compilation"}),": Compile Subjekt models into executable code or other target formats."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"subjektify-build"})," is already included in the core ",(0,i.jsx)(s.a,{href:"https://www.npmjs.com/package/subjektify",children:(0,i.jsx)(s.code,{children:"subjektify"})})," package."]}),"\n",(0,i.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"subjektify-build"})," is configurable from the ",(0,i.jsx)(s.code,{children:"subjektify.config.(js|ts)"}),". Here\u2019s a basic example of how to use ",(0,i.jsx)(s.code,{children:"subjektify-build"})," to parse and build a Subjekt model:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:'import { SubjektifyConfig } from "subjektify";\n\n\nconst config = {\n    namespace: "my.namespace",\n    version: "0.1.0",\n    license: "MIT",\n    projections: {\n        myProjection: {\n            transforms: [{\n                name: "excludeShapesByTrait",\n                args: {\n                    traits: ["internal"]\n                }\n            }]\n        }\n    }\n};\n'})})]})}function c(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>a});var i=n(6540);const t={},l=i.createContext(t);function r(e){const s=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:s},e.children)}}}]);