"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1548],{6745:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var n=r(4848),s=r(8453);const c={sidebar_position:2},a="Aggregate Types",i={id:"reference/subjekt/types/aggregate",title:"Aggregate Types",description:"Aggregate types contain configurable member references to others shapes.",source:"@site/docs/reference/subjekt/types/aggregate.md",sourceDirName:"reference/subjekt/types",slug:"/reference/subjekt/types/aggregate",permalink:"/docs/reference/subjekt/types/aggregate",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"referenceSidebar",previous:{title:"Simple Types",permalink:"/docs/reference/subjekt/types/simple"},next:{title:"Subject Types",permalink:"/docs/reference/subjekt/types/subject"}},o={},d=[{value:"<code>list</code>",id:"list",level:2},{value:"<code>map</code>",id:"map",level:2},{value:"<code>structure</code>",id:"structure",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"aggregate-types",children:"Aggregate Types"}),"\n",(0,n.jsx)(t.p,{children:"Aggregate types contain configurable member references to others shapes."}),"\n",(0,n.jsx)(t.h2,{id:"list",children:(0,n.jsx)(t.code,{children:"list"})}),"\n",(0,n.jsx)(t.p,{children:"The list type represents an ordered homogeneous collection of values. A list shape requires a single member named member."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"list MyList {\n    member: String\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"map",children:(0,n.jsx)(t.code,{children:"map"})}),"\n",(0,n.jsxs)(t.p,{children:["The map type represents a map data structure that maps string keys to homogeneous values. A map requires a member named key that MUST target a ",(0,n.jsx)(t.code,{children:"string"})," shape and a member named value."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"map IntegerMap {\n    key: String\n    value: Integer\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"structure",children:(0,n.jsx)(t.code,{children:"structure"})}),"\n",(0,n.jsx)(t.p,{children:"The structure type represents a fixed set of named, unordered, heterogeneous values. A structure shape contains a set of named members, and each member name maps to exactly one member definition."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'structure MyStructure {\n    foo: String\n\n    @required\n    bar: Integer\n\n    greeting: String = "Hello"\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var n=r(6540);const s={},c=n.createContext(s);function a(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);