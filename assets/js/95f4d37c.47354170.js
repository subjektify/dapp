"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1802],{6732:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var i=t(4848),o=t(8453);const a={sidebar_position:1},s="Develop with Subjektify",d={id:"develop/index",title:"Develop with Subjektify",description:"Welcome to the comprehensive development guide for Subjektify, your go-to toolkit for building decentralized applications (dApps) with a focus on efficiency, flexibility, and robustness. This guide is intended to serve as your foundational resource for understanding and leveraging the extensive features and capabilities that Subjektify offers. Whether you're a seasoned blockchain developer or new to the dApp landscape, this guide will equip you with the knowledge and tools you need to build scalable and secure decentralized applications.",source:"@site/docs/develop/index.md",sourceDirName:"develop",slug:"/develop/",permalink:"/docs/develop/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"developSidebar",next:{title:"Get Started",permalink:"/docs/develop/start/"}},r={},l=[{value:"Subjektify: The Build System and Toolkit",id:"subjektify-the-build-system-and-toolkit",level:2},{value:"Why Subjektify?",id:"why-subjektify",level:3},{value:"Example: Quick Start",id:"example-quick-start",level:3},{value:"Understanding <code>subjektify.json</code>",id:"understanding-subjektifyjson",level:3},{value:"The Importance of Interface Definition",id:"the-importance-of-interface-definition",level:3},{value:"Example: Defining a Simple Subject",id:"example-defining-a-simple-subject",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"develop-with-subjektify",children:"Develop with Subjektify"}),"\n",(0,i.jsx)(n.p,{children:"Welcome to the comprehensive development guide for Subjektify, your go-to toolkit for building decentralized applications (dApps) with a focus on efficiency, flexibility, and robustness. This guide is intended to serve as your foundational resource for understanding and leveraging the extensive features and capabilities that Subjektify offers. Whether you're a seasoned blockchain developer or new to the dApp landscape, this guide will equip you with the knowledge and tools you need to build scalable and secure decentralized applications."}),"\n",(0,i.jsx)(n.h2,{id:"subjektify-the-build-system-and-toolkit",children:"Subjektify: The Build System and Toolkit"}),"\n",(0,i.jsx)(n.p,{children:"Subjektify is a meticulously crafted toolkit designed to remove the complexities and bottlenecks commonly encountered in dApp development. It provides you with a unified suite of tools and utilities that not only streamline your development workflow but also enable you to focus on what matters most: innovation and user experience."}),"\n",(0,i.jsx)(n.h3,{id:"why-subjektify",children:"Why Subjektify?"}),"\n",(0,i.jsx)(n.p,{children:"The landscape of dApp development is fraught with challenges, from managing smart contracts to ensuring a secure and user-friendly interface. Subjektify addresses these challenges head-on, offering a seamless development experience that lets you concentrate on building feature-rich, high-performance dApps."}),"\n",(0,i.jsx)(n.h3,{id:"example-quick-start",children:"Example: Quick Start"}),"\n",(0,i.jsx)(n.p,{children:"Starting a new dApp project is incredibly simple with Subjektify. With just a single command, you can scaffold a new project, complete with all the configurations and boilerplate code you'll need:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx subjektify create my.dapp\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This command initializes a new dApp project in a directory named ",(0,i.jsx)(n.code,{children:"my.dapp"}),", pre-configured and ready for development."]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["Subjektify also allows you to leverage existing ",(0,i.jsx)(n.a,{href:"https://blueprints.subjektify.dev",children:"Blueprints"})," to jumpstart your project. For example, to create a new dApp with a React frontend and Truffle for smart contract management, you can use:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx subjektify create my.dapp -b subjektify/react.truffle\n"})})]}),"\n",(0,i.jsxs)(n.h3,{id:"understanding-subjektifyjson",children:["Understanding ",(0,i.jsx)(n.code,{children:"subjektify.json"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"subjektify.json"})," file serves as the configuration hub for your dApp project. It contains various settings and parameters that dictate how Subjektify should handle different aspects of your project, from compilation and deployment to testing and interaction. This file is automatically generated when you create a new project and can be customized to suit the specific needs of your dApp."]}),"\n",(0,i.jsx)(n.h3,{id:"the-importance-of-interface-definition",children:"The Importance of Interface Definition"}),"\n",(0,i.jsx)(n.p,{children:"In a decentralized application, clear and unambiguous interfaces are crucial for secure and effective communication between different components, be it smart contracts, frontend interfaces, or off-chain services. Subjekt provides a standardized way to define these interfaces, ensuring that all components of your dApp can interact seamlessly."}),"\n",(0,i.jsx)(n.h3,{id:"example-defining-a-simple-subject",children:"Example: Defining a Simple Subject"}),"\n",(0,i.jsxs)(n.p,{children:["Here's how you can define a simple ",(0,i.jsx)(n.code,{children:"subject"})," interface using Subjekt:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-subjekt",children:'subject Tree {\n    version: "1.0.0"\n    states: [Dimensions]\n    behaviors: [CutTree]\n}\n\nstate Dimensions {\n    length: string\n    radius: double\n}\n\nbehavior CutTree\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the ",(0,i.jsx)(n.code,{children:"Tree"})," subject is defined with a ",(0,i.jsx)(n.code,{children:"Dimensions"})," state that includes properties like ",(0,i.jsx)(n.code,{children:"length"})," and ",(0,i.jsx)(n.code,{children:"radius"}),", and a ",(0,i.jsx)(n.code,{children:"CutTree"})," behavior that could encapsulate the logic for cutting down the tree."]}),"\n",(0,i.jsx)(n.p,{children:"By clearly separating the roles of interface definition (via Subjekt) and build and deployment processes (via Subjektify), we offer a modular, scalable, and efficient approach to dApp development. This separation ensures that you have the flexibility to define complex data structures, behaviors, and interactions in Subjekt, while Subjektify takes care of the heavy lifting involved in building, deploying, and managing your dApp."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var i=t(6540);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);